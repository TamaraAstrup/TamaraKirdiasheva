-- Find out when was the first transaction for each student. 

-- -- select *
-- -- from skyeng_db.payments
  
with first_payments as
(   select   user_id
           , min(date_trunc('day', transaction_datetime)) as first_payment_date -- date of first successful transaction
    from skyeng_db.payments
    where status_name = 'success' 
    group by user_id 
),

-- Collect a table with dates for each calendar day of 2016.

all_dates as
(
  select distinct class_start_datetime::date as dt
    from skyeng_db.classes 
    where date_trunc('year', class_start_datetime) = '2016-01-01'
),
  

-- Create CTEː 'all_dates_by_user', where all student’s life dates will be stored after the first transaction.

all_dates_by_user as
( select  user_id
        , dt
    from first_payments  
        join all_dates 
        on first_payment_date <= dt
),

-- Create a CTE query to find balance changes associated with successful transactions.
-- The 'payments_by_dates' table contain information about users, the dates of their transactions, 
-- and the balance changes at each point in time based on the classes associated with those transactions.

payments_by_dates as
    (
    select user_id
         , transaction_datetime::date as payment_date
         , sum(classes) over (partition by user_id, transaction_datetime) as transaction_balance_change 
    from skyeng_db.payments
    where status_name = 'success'
    ),


-- Create a CTE to look up a student's balance that is generated by transactions only.

 payments_by_dates_cumsum as 
  (
    select  adbu.user_id
          , adbu.dt
          , coalesce(transaction_balance_change,0) as transaction_balance_change
          , sum(coalesce(transaction_balance_change,0)) over (partition by adbu.user_id order by adbu.dt) as transaction_balance_change_cs
    from all_dates_by_user as adbu 
        left join payments_by_dates as pbd
            on adbu.user_id = pbd.user_id
            and adbu.dt = pbd.payment_date
    ),

-- Create a CTE `classes_by_dates` for accounting the number of lessons completed on that day.

 classes_by_dates as 
    (
    select  user_id
          , class_start_datetime::date as class_date
          , count(id_class) over (partition by user_id, class_start_datetime)*-1 as classes -- multiply by `-1` to reflect that `-` are write-offs from the balance sheet. 
     from skyeng_db.classes
     where class_type != 'trial'
        and class_status in ('success','failed_by_student')
     ),

-- Create a CTE for stoaring the cummulative sum the completed classes. 

classes_by_dates_dates_cumsumc as
    (
    select a.user_id
         , a.dt
         , coalesce(classes,0) as classes
         , sum(coalesce(classes,0)) over (partition by a.user_id order by a.dt) as classes_cs
    from  all_dates_by_user a
        left join classes_by_dates as cd
            on a.user_id = cd.user_id
            and a.dt = cd.class_date
    ),
    
-- -- select*
-- -- from classes_by_dates_dates_cumsumс
    
-- Create a CTE `balances` for calculated the balance for each student. 

balances as 
 (
 select   pc.user_id
        , pc.dt
        , pc.transaction_balance_change 
        , pc.transaction_balance_change_cs 
        , ddc.classes 
        , ddc.classes_cs
        , classes_cs + transaction_balance_change_cs as balance
    from payments_by_dates_cumsum pc
    left join classes_by_dates_dates_cumsumc ddc
        on pc.user_id = ddc.user_id
        and pc.dt = ddc.dt
 )
 
  
-- select *
-- from balances 
-- order by balance asc
-- limit 1000


-- create a query for demonstrated the changes in the total number of lessons on students' balances. 

 select dt
        , sum (transaction_balance_change) as sum_transaction_balance_change
        , sum (transaction_balance_change_cs) as sum_transaction_balance_change_cs
        , sum (classes) as sum_classes
        , sum (classes_cs) as sum_classes_cs
        , sum (balance) as sum_balance
        
 from balances 
 group by dt 
 order by dt
